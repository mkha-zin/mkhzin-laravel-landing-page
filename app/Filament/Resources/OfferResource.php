<?php

namespace App\Filament\Resources;

use App\Filament\Resources\OfferResource\Pages;
use App\Models\Offer;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Form;
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\Section as InfoSection;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ReplicateAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\CheckboxColumn;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\App;
use LaraZeus\Delia\Filament\Actions\BookmarkHeaderAction;
use Webbingbrasil\FilamentAdvancedFilter\Filters\BooleanFilter;
use Webbingbrasil\FilamentAdvancedFilter\Filters\DateFilter;

class OfferResource extends Resource
{
    protected static ?string $model = Offer::class;
    protected static ?int $navigationSort = 3;

    public static function canAccess(): bool
    {
        if (auth()->user()->role !== 'super') {
            abort(403, 'You do not have access to this page.');
        }
        return parent::canAccess(); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return __('dashboard.servicesManagement');
    }

    public static function getPluralLabel(): ?string
    {
        return __('dashboard.offers');
    }

    public static function getRecordTitleAttribute(): ?string
    {
        return App::currentLocale() === 'ar' ? 'name_ar' : 'name_en';
    }

    public static function getGloballySearchableAttributes(): array
    {
        return ['name_ar', 'name_en', 'description_ar', 'description_en'];
    }

    public static function getGlobalSearchResultDetails(Model $record): array
    {
        return [
            __('dashboard.name') => App::currentLocale() === 'ar' ? $record->name_ar : $record->name_en,
            __('dashboard.description') => App::currentLocale() === 'ar' ? $record->description_ar : $record->description_en,
        ];
    }

    public static function getModelLabel(): string
    {
        return __('dashboard.offers');
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make(
                    App::currentLocale() === 'ar' ? 'name_ar' : 'name_en'
                )
                    ->label(__('dashboard.name'))
                    ->searchable(),

                TextColumn::make(
                    App::currentLocale() === 'ar' ? 'description_ar' : 'description_en'
                )
                    ->label(__('dashboard.description'))
                    ->words(5)
                    ->searchable(),
                ImageColumn::make('image')
                    ->label(__('dashboard.image')),
                TextColumn::make('pdf_file')
                    ->label(__('dashboard.files'))
                    ->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('start_date')
                    ->label(__('dashboard.start_date'))
                    ->date()
                    ->dateTimeTooltip('Y/m/d h:i:s A')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable(),
                TextColumn::make('end_date')
                    ->label(__('dashboard.end_date'))
                    ->date()
                    ->dateTimeTooltip('Y/m/d h:i:s A')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                CheckboxColumn::make('is_active')
                    ->label(__('dashboard.status')),
                TextColumn::make('created_at')
                    ->label(__('dashboard.created at'))
                    ->date()
                    ->dateTimeTooltip('Y/m/d h:i:s A')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('updated_at')
                    ->label(__('dashboard.updated at'))
                    ->date()
                    ->dateTimeTooltip('Y/m/d h:i:s A')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])->defaultSort('created_at', 'desc')
            ->filters([
                BooleanFilter::make('is_active')
                    ->label(__('dashboard.status')),
                DateFilter::make('created_at')
                    ->label(__('dashboard.created at')),
            ])
            ->actions([
                ViewAction::make()->label('')->tooltip(__('dashboard.View Offer')),
                EditAction::make()->label('')->tooltip(__('dashboard.Edit Offer')),
                DeleteAction::make()->label('')->tooltip(__('dashboard.Delete Offer')),
                ReplicateAction::make()
                    ->label('')
                    ->tooltip(__('dashboard.Replicate Offer'))
                    ->excludeAttributes(['is_active'])
                    ->form([
                        Section::make()->schema([
                            Select::make('branch_id')
                                ->label(__('dashboard.branch'))
                                ->relationship('branch',
                                    App::currentLocale() === 'ar' ? 'name_ar' : 'name_en'
                                )
                                ->columnSpanFull()
                                ->required(),
                        ])->columns(2),

                        Section::make(__('dashboard.files'))
                            ->collapsible()
                            ->collapsed()
                            ->schema([
                                FileUpload::make('image')
                                    ->label(__('dashboard.image'))
                                    ->directory('assets/images/offers')
                                    ->imageEditor()
                                    ->image()
                                    ->required(),
                                FileUpload::make('pdf_file')
                                    ->helperText(__('dashboard.Only Compressed files are allowed'))
                                    ->label(__('dashboard.file'))
                                    ->getUploadedFileNameForStorageUsing(function (UploadedFile $file, ?Offer $record) {
                                        if ($record) {
                                            return 'offer-' . $record->id . '-' . $record->name_en . '-' . $file->getClientOriginalName();
                                        }
                                        return 'offer-' . now() . $file->getClientOriginalName();
                                    })
                                    ->directory('zips')
                                    ->disk('zip')
                                    ->acceptedFileTypes(['zip', 'application/octet-stream', 'application/zip', 'application/x-zip', 'application/x-zip-compressed'])
                                    ->maxSize(50072)
                                    ->downloadable()
                                    ->required()
                            ])->columns(2),
                        Section::make(__('dashboard.title'))
                            ->collapsible()
                            ->collapsed()
                            ->schema([
                                TextInput::make('name_ar')
                                    ->label(__('dashboard.name_ar'))
                                    ->required()
                                    ->maxLength(255),
                                TextInput::make('name_en')
                                    ->label(__('dashboard.name_en'))
                                    ->required()
                                    ->maxLength(255),
                            ])->columns(2),
                        Section::make(__('dashboard.descriptions'))
                            ->collapsible()
                            ->collapsed()
                            ->schema([
                                MarkdownEditor::make('description_ar')
                                    ->label(__('dashboard.description_ar'))
                                    ->required(),
                                MarkdownEditor::make('description_en')
                                    ->label(__('dashboard.description_en'))
                                    ->required(),
                            ])->columns(2),

                        Section::make(
                            __('dashboard.duration')
                        )->schema([
                            DatePicker::make('start_date')
                                ->label(__('dashboard.start_date'))
                                ->required(),
                            DatePicker::make('end_date')
                                ->label(__('dashboard.end_date'))
                                ->required(),
                        ])->columns(2),

                        Toggle::make('is_active')
                            ->label(__('dashboard.status')),
                    ])
                    ->beforeReplicaSaved(function (Model $replica, array $data): void {
                        $replica->fill($data);
                    })
            ])
            ->bulkActions([
                DeleteBulkAction::make(),
            ]);
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()->schema([
                    Select::make('branch_id')
                        ->label(__('dashboard.branch'))
                        ->relationship('branch',
                            App::currentLocale() === 'ar' ? 'name_ar' : 'name_en'
                        )
                        ->columnSpanFull()
                        ->required(),
                ])->columns(2),

                Section::make(__('dashboard.files'))->schema([
                    FileUpload::make('image')
                        ->label(__('dashboard.image'))
                        ->directory('assets/images/offers')
                        ->imageEditor()
                        ->image()
                        ->downloadable()
                        ->required(),
                    FileUpload::make('pdf_file')
                        ->helperText(__('dashboard.Only Compressed files are allowed'))
                        ->label(__('dashboard.file'))
                        ->getUploadedFileNameForStorageUsing(function (UploadedFile $file, ?Offer $record) {
                            if ($record) {
                                return 'offer-' . $record->id . '-' . $record->name_en . '-' . $file->getClientOriginalName();
                            }
                            return $file->getClientOriginalName();
                        })
                        ->directory('zips')
                        ->disk('zip')
                        ->acceptedFileTypes(['zip', 'application/octet-stream', 'application/zip', 'application/x-zip', 'application/x-zip-compressed'])
                        ->maxSize(50072)
                        ->downloadable()
                        ->required()
                ])->columns(2),
                Section::make(__(''))->schema([
                    TextInput::make('name_ar')
                        ->label(__('dashboard.name_ar'))
                        ->required()
                        ->maxLength(255),
                    TextInput::make('name_en')
                        ->label(__('dashboard.name_en'))
                        ->required()
                        ->maxLength(255),
                ])->columns(2),
                Section::make(__('dashboard.descriptions'))->schema([
                    MarkdownEditor::make('description_ar')
                        ->label(__('dashboard.description_ar'))
                        ->required(),
                    MarkdownEditor::make('description_en')
                        ->label(__('dashboard.description_en'))
                        ->required(),
                ])->columns(2),

                Section::make(
                    __('dashboard.duration')
                )->schema([
                    DatePicker::make('start_date')
                        ->label(__('dashboard.start_date'))
                        ->required(),
                    DatePicker::make('end_date')
                        ->label(__('dashboard.end_date'))
                        ->required(),
                ])->columns(2),

                Toggle::make('is_active')
                    ->label(__('dashboard.status')),

            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema([

            InfoSection::make()->schema([
                TextEntry::make(
                    App::currentLocale() === 'ar' ? 'branch.name_ar' : 'branch.name_en'
                )->label(__('dashboard.branch')),
            ])->columns(2),
            InfoSection::make(__('dashboard.image'))->schema([
                ImageEntry::make('image')
                    ->label(__('dashboard.image')),
                TextEntry::make('pdf_file')
                    ->label(__('dashboard.file')),
            ])->columns(2),
            InfoSection::make(__(''))->schema([
                TextEntry::make('name_ar')->label(__('dashboard.name_ar')),
                TextEntry::make('name_en')->label(__('dashboard.name_en')),
            ])->columns(2),
            InfoSection::make(__('dashboard.description'))->schema([
                TextEntry::make('description_ar')->label(__('dashboard.description_ar')),
                TextEntry::make('description_en')->label(__('dashboard.description_en')),

            ])->columns(2),

            InfoSection::make(__('dashboard.duration'))->schema([
                TextEntry::make('start_date')->label(__('dashboard.start_date')),
                TextEntry::make('end_date')->label(__('dashboard.end_date')),
            ])->columns(2)


        ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListOffers::route('/'),
            'create' => Pages\CreateOffer::route('/create'),
            'view' => Pages\ViewOffer::route('/{record}'),
            'edit' => Pages\EditOffer::route('/{record}/edit'),
        ];
    }

    protected function getHeaderActions(): array
    {
        return [
            BookmarkHeaderAction::make()
        ];
    }
}
